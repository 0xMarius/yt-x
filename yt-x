#!/usr/bin/env bash

CLI_HEADER='
██╗░░░██╗████████╗░░░░░░██╗░░██╗
╚██╗░██╔╝╚══██╔══╝░░░░░░╚██╗██╔╝
░╚████╔╝░░░░██║░░░█████╗░╚███╔╝░
░░╚██╔╝░░░░░██║░░░╚════╝░██╔██╗░
░░░██║░░░░░░██║░░░░░░░░░██╔╝╚██╗
░░░╚═╝░░░░░░╚═╝░░░░░░░░░╚═╝░░╚═╝
'

CLI_NAME=${0##*/}
CLI_VERSION="0.1.0"
CLI_AUTHOR="BeneX-254"
CLI_DIR="$(dirname "$(realpath "$0")")"
CLI_CONFIG_DIR="$HOME/.config/$CLI_NAME"
CLI_CACHE_DIR="$HOME/.cache/$CLI_NAME"
CLI_PREVIEW_IMAGES_CACHE_DIR="$CLI_CACHE_DIR/preview_images"

[ -d "$CLI_CONFIG_DIR" ] || mkdir -p "$CLI_CONFIG_DIR"
[ -d "$CLI_PREVIEW_IMAGES_CACHE_DIR" ] || mkdir -p "$CLI_PREVIEW_IMAGES_CACHE_DIR"

case "$(uname -a)" in
*ndroid) PLATFORM="android" ;;
*Darwin*) PLATFORM="mac" ;;
*MINGW* | *WSL2*) PLATFORM="windows" ;; # Windows OS
*) PLATFORM="linux" ;;
esac

print_config() {
  echo "\
#
#    ██╗░░░██╗████████╗░░░░░░██╗░░██╗  ░█████╗░░█████╗░███╗░░██╗███████╗██╗░██████╗░
#    ╚██╗░██╔╝╚══██╔══╝░░░░░░╚██╗██╔╝  ██╔══██╗██╔══██╗████╗░██║██╔════╝██║██╔════╝░
#    ░╚████╔╝░░░░██║░░░█████╗░╚███╔╝░  ██║░░╚═╝██║░░██║██╔██╗██║█████╗░░██║██║░░██╗░
#    ░░╚██╔╝░░░░░██║░░░╚════╝░██╔██╗░  ██║░░██╗██║░░██║██║╚████║██╔══╝░░██║██║░░╚██╗
#    ░░░██║░░░░░░██║░░░░░░░░░██╔╝╚██╗  ╚█████╔╝╚█████╔╝██║░╚███║██║░░░░░██║╚██████╔╝
#    ░░░╚═╝░░░░░░╚═╝░░░░░░░░░╚═╝░░╚═╝  ░╚════╝░░╚════╝░╚═╝░░╚══╝╚═╝░░░░░╚═╝░╚═════╝░
#

# whether to show colors when printing ouput
PRETTY_PRINT: $PRETTY_PRINT

# your preferred editor for editing your config
EDITOR: $PREFERRED_EDITOR

# your preferred selector for the tui [fzf/rofi]
PREFERRED_SELECTOR: $PREFERRED_SELECTOR

# the quality of the video when streaming with a player other than mpv
VIDEO_QUALITY: $VIDEO_QUALITY

# whether to show previews [true/false]
# its cool so enable it
ENABLE_PREVIEW: $ENABLE_PREVIEW

# whether to run mpv as a background process and prevent it from closing even if you terminate the program or terminal session
DISOWN_STREAMING_PROCESS: $DISOWN_STREAMING_PROCESS

# whether to update the recent list kept locally [true/false]
UPDATE_RECENT: $UPDATE_RECENT

# the number of recent videos to keep
NO_OF_RECENT: $NO_OF_RECENT

# the player to use for streaming [mpv/vlc]
PLAYER: $PLAYER

# the browser to use to extract cookies from
# this is used to by yt-dlp to access content that would require login
PREFERRED_BROWSER: ${PREFERRED_BROWSER[1]}

# the number of results to get from yt-dlp
NO_OF_SEARCH_RESULTS: $NO_OF_SEARCH_RESULTS

# the duration notifications stay on the screen
NOTIFICATION_DURATION: $NOTIFICATION_DURATION

# where your downloads will be stored
DOWNLOAD_DIRECTORY: $DOWNLOAD_DIRECTORY
"
}
load_config() {
  PRETTY_PRINT="$(grep -s 'PRETTY_PRINT:' "$CLI_CONFIG_DIR/${CLI_NAME}.conf" | sed 's/^#.*//g;s/^.*: //')"
  [ -z "$PRETTY_PRINT" ] && PRETTY_PRINT="true"

  DISOWN_STREAMING_PROCESS="$(grep -s 'DISOWN_STREAMING_PROCESS:' "$CLI_CONFIG_DIR/${CLI_NAME}.conf" | sed 's/^#.*//g;s/^.*: //')"
  [ -z "$DISOWN_STREAMING_PROCESS" ] && DISOWN_STREAMING_PROCESS="true"

  PREFERRED_EDITOR="$(grep -s 'EDITOR:' "$CLI_CONFIG_DIR/${CLI_NAME}.conf" | sed 's/^#.*//g;s/^.*: //')"
  [ -z "$PREFERRED_EDITOR" ] && PREFERRED_EDITOR=${EDITOR:-open}

  # YT_DLP_FORMAT="$(grep -s 'YT_DLP_FORMAT:' "$CLI_CONFIG_DIR/${CLI_NAME}.conf" | sed 's/^#.*//g;s/^.*: //')"

  PREFERRED_SELECTOR="$(grep -s 'PREFERRED_SELECTOR:' "$CLI_CONFIG_DIR/${CLI_NAME}.conf" | sed 's/^#.*//g;s/^.*: //')"
  [ -z "$PREFERRED_SELECTOR" ] && PREFERRED_SELECTOR="fzf"

  VIDEO_QUALITY="$(grep -s 'VIDEO_QUALITY:' "$CLI_CONFIG_DIR/${CLI_NAME}.conf" | sed 's/^#.*//g;s/^.*: //')"
  [ -z "$VIDEO_QUALITY" ] && VIDEO_QUALITY=1080

  ENABLE_PREVIEW="$(grep -s 'ENABLE_PREVIEW:' "$CLI_CONFIG_DIR/${CLI_NAME}.conf" | sed 's/^#.*//g;s/^.*: //')"
  [ -z "$ENABLE_PREVIEW" ] && ENABLE_PREVIEW="false"

  UPDATE_RECENT="$(grep -s 'UPDATE_RECENT:' "$CLI_CONFIG_DIR/${CLI_NAME}.conf" | sed 's/^#.*//g;s/^.*: //')"
  [ -z "$UPDATE_RECENT" ] && UPDATE_RECENT="true"

  NO_OF_RECENT="$(grep -s 'NO_OF_RECENT:' "$CLI_CONFIG_DIR/${CLI_NAME}.conf" | sed 's/^#.*//g;s/^.*: //')"
  [ -z "$NO_OF_RECENT" ] && NO_OF_RECENT=30

  PLAYER="$(grep -s 'PLAYER:' "$CLI_CONFIG_DIR/${CLI_NAME}.conf" | sed 's/^#.*//g;s/^.*: //')"
  [ -z "$PLAYER" ] && PLAYER='mpv'

  PREFERRED_BROWSER="$(grep -s 'PREFERRED_BROWSER:' "$CLI_CONFIG_DIR/${CLI_NAME}.conf" | sed 's/^#.*//g;s/^.*: //')"
  # [ -z "$PREFERRED_BROWSER" ] && PREFERRED_BROWSER="chrome"
  [ -n "$PREFERRED_BROWSER" ] && PREFERRED_BROWSER=("--cookies-from-browser" "$PREFERRED_BROWSER")

  NO_OF_SEARCH_RESULTS="$(grep -s 'NUMBER_OF_SEARCH_RESULTS:' "$CLI_CONFIG_DIR/${CLI_NAME}.conf" | sed 's/^#.*//g;s/^.*: //')"
  [ -z "$NO_OF_SEARCH_RESULTS" ] && NO_OF_SEARCH_RESULTS=30

  NOTIFICATION_DURATION="$(grep -s 'NOTIFICATION_DURATION:' "$CLI_CONFIG_DIR/${CLI_NAME}.conf" | sed 's/^#.*//g;s/^.*: //')"
  [ -z "$NOTIFICATION_DURATION" ] && NOTIFICATION_DURATION=5

  DOWNLOAD_DIRECTORY="$(grep -s 'DOWNLOAD_DIRECTORY:' "$CLI_CONFIG_DIR/${CLI_NAME}.conf" | sed 's/^#.*//g;s/^.*: //')"
  [ -z "$DOWNLOAD_DIRECTORY" ] && DOWNLOAD_DIRECTORY="$HOME/Videos/$CLI_NAME"
  [ -d "${DOWNLOAD_DIRECTORY/#\~\//$HOME/}" ] || mkdir -p "${DOWNLOAD_DIRECTORY/#\~\//$HOME/}"

  ! [ -f "$CLI_CONFIG_DIR/${CLI_NAME}.conf" ] && print_config >"$CLI_CONFIG_DIR/${CLI_NAME}.conf"

  ROFI_THEME="$(grep -s 'ROFI_THEME:' "$CLI_CONFIG_DIR/${CLI_NAME}.conf" | sed 's/^#.*//g;s/^.*: //')"

  FZF_DEFAULT_OPTS=${LIBX_FZF_OPTS:-'
    --color=fg:#d0d0d0,fg+:#d0d0d0,bg:#121212,bg+:#262626
    --color=hl:#5f87af,hl+:#5fd7ff,info:#afaf87,marker:#87ff00
    --color=prompt:#d7005f,spinner:#af5fff,pointer:#af5fff,header:#87afaf
    --color=border:#262626,label:#aeaeae,query:#d9d9d9
    --border="rounded" --border-label="" --preview-window="border-rounded" --prompt="> "
    --marker=">" --pointer="◆" --separator="─" --scrollbar="│"
  '}
  init_pretty_print
  export FZF_DEFAULT_OPTS PRETTY_PRINT PLATFORM
}
fzf-preview() {

  file=${1/#\~\//$HOME/}
  type=$(file --dereference --mime -- "$file")

  if [[ ! $type =~ image/ ]]; then
    # Sometimes bat is installed as batcat.
    # echo hmmm weird this should never be the case
    # echo for some reason the mime type for the given file is not an image
    # echo please report this to the devs
    echo Loading...
    return 1
  fi

  dim=${FZF_PREVIEW_COLUMNS}x${FZF_PREVIEW_LINES}
  if [[ $dim = x ]]; then
    dim=$(stty size </dev/tty | awk '{print $2 "x" $1}')
  elif ! [[ $KITTY_WINDOW_ID ]] && ((FZF_PREVIEW_TOP + FZF_PREVIEW_LINES == $(stty size </dev/tty | awk '{print $1}'))); then
    # Avoid scrolling issue when the Sixel image touches the bottom of the screen
    # * https://github.com/junegunn/fzf/issues/2544
    dim=${FZF_PREVIEW_COLUMNS}x$((FZF_PREVIEW_LINES - 1))
  fi

  # 1. Use kitty icat on kitty terminal
  if [[ $KITTY_WINDOW_ID ]]; then
    # 1. 'memory' is the fastest option but if you want the image to be scrollable,
    #    you have to use 'stream'.
    #
    # 2. The last line of the output is the ANSI reset code without newline.
    #    This confuses fzf and makes it render scroll offset indicator.
    #    So we remove the last line and append the reset code to its previous line.
    kitty icat --clear --transfer-mode=memory --unicode-placeholder --stdin=no --place="$dim@0x0" "$file" | sed '$d' | sed $'$s/$/\e[m/'

    # 2. Use chafa with Sixel output
  elif command -v chafa >/dev/null; then
    case "$PLATFORM" in
    android) chafa -s "$dim" "$file" ;;
    *) chafa -f sixel -s "$dim" "$file" ;;
    esac
    # Add a new line character so that fzf can display multiple images in the preview window
    echo

    # 3. If chafa is not found but imgcat is available, use it on iTerm2
  elif command -v imgcat >/dev/null; then
    # NOTE: We should use https://iterm2.com/utilities/it2check to check if the
    # user is running iTerm2. But for the sake of simplicity, we just assume
    # that's the case here.
    imgcat -W "${dim%%x*}" -H "${dim##*x}" "$file"

    # 4. Cannot find any suitable method to preview the image
  else
    echo please install a terminal image viewer
    echo either icat for kitty terminal and wezterm or imgcat or chafa
  fi
}

confirm() {
  if command -v "gum" &>/dev/null; then
    gum confirm "$1"
  else
    echo "$CLI_HEADER" >/dev/stderr
    read -r -p 'Are you sure you want to proceed [y/N]?: ' CONFIRMED
    case "$CONFIRMED" in
    y | Y)
      return 0
      ;;
    *)
      return 1
      ;;
    esac
  fi
}
launcher() {
  # clear
  case "${PREFERRED_SELECTOR,,}" in
  rofi)
    if [ -z "$ROFI_THEME" ]; then
      rofi -sort -matching fuzzy -dmenu -i -width 1500 -p "" -mesg "Select Action" -matching fuzzy -sorting-method fzf
    else
      rofi -no-config -theme "$ROFI_THEME" -sort -matching fuzzy -dmenu -i -width 1500 -p "" -mesg "Select Action" -matching fuzzy -sorting-method fzf
    fi
    ;;
  *)
    fzf \
      --info=hidden \
      --layout=reverse \
      --height=100% \
      --prompt="${1}: " \
      --header-first --header="$CLI_HEADER" \
      --exact --cycle
    ;;
  esac

}
download_preview_images() {
  echo Downloading images in the background...
  ids="$(echo "$search_results" | jq '.entries[].id' -r 2>/dev/null)"
  urls="$(echo "$search_results" | jq '.entries[].thumbnails[-1].url' -r 2>/dev/null)"

  [ -f "$CLI_PREVIEW_IMAGES_CACHE_DIR/previews.txt" ] && rm "$CLI_PREVIEW_IMAGES_CACHE_DIR/previews.txt"
  for ((i = 1; i <= "$(echo "$ids" | wc -l)"; i++)); do
    echo "url = \"$(echo "$urls" | head -n $i | tail -n 1)\"" >>"$CLI_PREVIEW_IMAGES_CACHE_DIR/previews.txt"
    echo "output = \"$CLI_PREVIEW_IMAGES_CACHE_DIR/$(echo "$ids" | head -n $i | tail -n 1).jpg\"" >>"$CLI_PREVIEW_IMAGES_CACHE_DIR/previews.txt"
  done
  curl -s -K "$CLI_PREVIEW_IMAGES_CACHE_DIR/previews.txt" &
}
launcher_with_preview() {
  # clear
  case "${PREFERRED_SELECTOR,,}" in
  rofi)
    if [ -z "$ROFI_THEME" ]; then
      rofi -sort -matching fuzzy -dmenu -i -width 1500 -p "" -mesg "$1" -matching fuzzy -sorting-method fzf
    else
      rofi -no-config -theme "$ROFI_THEME" -sort -matching fuzzy -dmenu -i -p "" -mesg "Select Action" -matching fuzzy -sorting-method fzf
    fi
    ;;
  *)
    fzf \
      --info=hidden \
      --layout=reverse \
      --height=100% \
      --prompt="${1}: " \
      --header-first --header="$CLI_HEADER" \
      --preview-window=left,35%,wrap --bind=right:accept \
      --expect=shift-left,shift-right --tabstop=1 \
      --cycle --exact \
      --ansi --preview="\
      if ! [ -z {} ] && ! [ {} = \"Exit\" ] && ! [ {} = \"Main Menu\" ];then
        init_pretty_print;

        title=\"\$(echo {}|sed 's/\"/\\\\\\\"/g')\"
        video=\$(echo \"\$search_results\" | jq -r \".entries | map(select(.title == \\\"\$title\\\" )) | .[0]\" 2>/dev/null)

        id=\$(echo \$video | jq '.id' -r);

        channel=\$(echo \"\$video\"| jq '.channel' -r);

        duration=\$(echo \"\$video\"| jq 'try if .duration>=3600 then .duration/3600|floor|tostring + \" hours\" else .duration/60|floor|tostring + \" mins\" end catch \"Unknown\" ' -r);
        
        view_count=\$(echo \"\$video\"| jq '.view_count' -r);
        
        live_status=\$(echo \"\$video\"| jq '.live_status' -r);
        [ \"\$live_status\" = \"null\" ] && live_status='false' 
        
        description=\$(echo \"\$video\"| jq '.description' -r);
        
        if [ -f \"$CLI_PREVIEW_IMAGES_CACHE_DIR/\${id}.jpg\" ];then fzf-preview \"$CLI_PREVIEW_IMAGES_CACHE_DIR/\${id}.jpg\" 2>/dev/null;
        else echo loading preview image...;
        fi
        echo \"\${MAGENTA}\${BOLD}Id: \${RESET}\$id\";
        echo \"\${MAGENTA}\${BOLD}Title: \${RESET}\$(echo \"\$video\"|jq '.title' -r)\";
        echo \"\${MAGENTA}\${BOLD}Channel: \${RESET}\$channel\";
        echo \"\${MAGENTA}\${BOLD}Duration: \${RESET}\$duration\";
        echo \"\${MAGENTA}\${BOLD}View Count: \${RESET}\$view_count views\";
        echo \"\${MAGENTA}\${BOLD}Live Status: \${RESET}\$live_status\";
        echo \"\${MAGENTA}\${BOLD}Description: \${RESET}\$description\";
      else
        echo Loading...;
      fi;
      "
    ;;
  esac

}
init_pretty_print() {
  if [ "$PRETTY_PRINT" = "true" ]; then
    # Check if stdout is a terminal
    RED=$(tput setaf 1)
    GREEN=$(tput setaf 2)
    YELLOW=$(tput setaf 3)
    BLUE=$(tput setaf 4)
    MAGENTA=$(tput setaf 5)
    CYAN=$(tput setaf 6)
    WHITE=$(tput setaf 7)
    BOLD=$(tput bold)
    BLACK=$(tput setaf 0)
    RESET=$(tput sgr0)
  fi

}
byebye() {
  clear
  echo "Have a good day $USERNAME"
  exit 0
}
prompt() {
  if command -v "gum" &>/dev/null; then
    gum input --header "$CLI_HEADER" --prompt "$1: "
  else
    echo "$CLI_HEADER" >/dev/stderr
    read -r -p "$1: " VAL
    echo "$VAL"
  fi
}
run_yt_dlp() {
  if command -v "gum" &>/dev/null; then
    gum spin --show-output -- yt-dlp "$1" -J --flat-playlist --playlist-start 1 --playlist-end "$NO_OF_SEARCH_RESULTS" "${PREFERRED_BROWSER[@]}"
  else
    echo "Loading..."
    yt-dlp "$1" -J --flat-playlist --playlist-start 1 --playlist-end "$NO_OF_SEARCH_RESULTS" "${PREFERRED_BROWSER[@]}"
  fi
}

core_dep_ch() {
  ! command -v "yt-dlp" &>/dev/null && echo yt-dlp is not installed and is a core dep please install it to proceed && exit 1
  ! command -v "jq" &>/dev/null && echo jq is not installed and is a core dep please install it to proceed && exit 1
}
trap byebye INT TERM
main() {
  core_dep_ch
  clear
  if [ -z "$action" ]; then
    action="$(printf 'Your Feed\nTrending\nSearch\nWatch Later\nSubscription Feed\nLiked Videos\nWatch History\nEdit Config\nExit' | launcher "Select Action")"
  fi
  [ "$action" = "Exit" ] && byebye
  case "$action" in
  "Your Feed")
    url="https://www.youtube.com"
    search_results=$(run_yt_dlp "$url")
    ;;
  "Trending")
    url="https://www.youtube.com/feed/trending"
    search_results=$(run_yt_dlp "$url")
    ;;
  "Search")
    clear
    search_Term="$(prompt "Enter term to search for" | jq -Rr '@uri')"
    url="https://www.youtube.com/results?search_query=$search_Term&sp=EgIQAQ%253D%253D"
    search_results=$(run_yt_dlp "$url")
    ;;
  "Subscription Feed")
    url="https://www.youtube.com/feed/subscriptions"
    search_results=$(run_yt_dlp "$url")
    ;;
  "Liked Videos")
    url="https://www.youtube.com/playlist?list=LL"
    search_results=$(run_yt_dlp "$url")
    ;;
  "Watch Later")
    url="https://www.youtube.com/playlist?list=WL"
    search_results=$(run_yt_dlp "$url")
    ;;
  "Watch History")
    url="https://www.youtube.com/feed/history"
    search_results=$(run_yt_dlp "$url")
    ;;
  "Edit Config")
    if command -v "$EDITOR" &>/dev/null; then
      $EDITOR "$CLI_CONFIG_DIR/${CLI_NAME}.conf"
    else
      open "$CLI_CONFIG_DIR/${CLI_NAME}.conf"
    fi
    unset action
    main
    ;;
  Exit)
    byebye
    ;;
  *)
    echo invalid action
    sleep "$NOTIFICATION_DURATION"
    unset action
    main
    ;;
  esac
  unset action

  titles=$(echo "$search_results" | jq '.entries[].title' -r 2>/dev/null)
  [ "$ENABLE_PREVIEW" = "true" ] && download_preview_images
  while true; do
    if [ "$ENABLE_PREVIEW" = "true" ]; then
      SHELL="bash"
      export search_results SHELL
      export -f init_pretty_print fzf-preview
      title="$(printf "%s\nMain Menu\nExit" "$titles" | launcher_with_preview "select video" | tr -d '\n')"
    else
      title="$(printf "%s\nMain Menu\nExit" "$titles" | launcher "select video")"
    fi
    clear
    title="$(echo "$title" | sed 's/"/\\"/g')"
    [ "$title" = "Main Menu" ] && break
    [ "$title" = "Exit" ] && byebye

    video="$(echo "$search_results" | jq ".entries|map(select(.title == \"$title\"))|.[0]")"

    while true; do
      if [ -z "$media_action" ]; then
        media_action="$(printf 'Watch\nLike\nSubscribe to Channel\nDownload\nBack\nMain Menu\nExit' | launcher "Select Media Action")"
      fi
      [ "$media_action" = "Exit" ] && byebye
      clear
      case "$media_action" in
      Watch)
        echo "${MAGENTA}Now watching:${RESET} $title"
        url=$(echo "$video" | jq '.url' -r)
        if ! [ "$PLAYER" = mpv ] || [ "$PLATFORM" = android ]; then
          # url=$(yt-dlp "$url" -q --no-warnings -J 2>/dev/null | jq ".requested_formats| . as \$vid_formats|map(select(.height<=$VIDEO_QUALITY))|if isempty(.[]) then \$vid_formats else . end|.[0].url" -r 2>/dev/null)
          url=$(yt-dlp "$url" -q --no-warnings --get-url --format "best[height<=$VIDEO_QUALITY]/best" 2>/dev/null | tail -n 1)
          if ! [ "$?" = 0 ] || [ -z "$url" ]; then
            echo No video format found
            sleep 5
            break
          fi
        fi
        case "$PLATFORM" in
        android)
          case "$PLAYER" in
          mpv) nohup am start --user 0 -a android.intent.action.VIEW -d "$url" -n is.xyz.mpv/.MPVActivity >/dev/null 2>&1 & ;;
          vlc) nohup am start --user 0 -a android.intent.action.VIEW -d "$url" -n org.videolan.vlc/org.videolan.vlc.gui.video.VideoPlayerActivity -e "title" "$title" >/dev/null 2>&1 & ;;
          esac
          ;;
        *)
          case "$PLAYER" in
          mpv) mpv "$url" ;;
          vlc) vlc "$url" --video-title "$title" ;;
          esac
          ;;
        esac
        ;;
      Like)
        echo $video
        exit
        ;;
      "Subscribe to Channel")
        mpv "$(echo "$video" | jq '.url' -r)"
        ;;
      "Visit Channel")
        mpv "$(echo "$video" | jq '.url' -r)"
        ;;
      "Open in Browser")
        open "$(echo "$video" | jq '.url' -r)"
        ;;
      Download)
        yt-dlp "$(echo "$video" | jq '.url' -r)" --output "$DOWNLOAD_DIRECTORY/%(channel)s_%(title)s.%(ext)s"
        ;;
      Back)
        unset media_action
        break
        ;;
      "Main Menu")
        MAIN=true
        unset media_action
        break
        ;;
      Exit)
        byebye
        ;;
      *)
        echo invalid action
        sleep "$NOTIFICATION_DURATION"
        ;;
      esac
      unset media_action
    done
    if [ "$MAIN" = true ]; then
      MAIN=false
      break
    fi
  done
  main
}

usage() {
  printf "\
A script written to browse youtube from the terminal

Usage: %s [arguments] [options] 

Commandline options override the config

Options:
  -s, --search
    search for a video
  -e, --edit-config
    edit $CLI_NAME config file
  --rofi-theme <path>
    set the path to your rofi config file
  -d, --disown-streaming-process
    disown the streaming process so you can contine streaming even if you close $CLI_NAME
  -D, --no-disown-streaming-process
    don't disown the streaming process
  -p <selector>,--preferred-selector <selector>
    set the preferred selector for $CLI_NAME to use
  --preview
    enable the preview window
  --no-preview
    disable the preview window
  -E, --generate-desktop-entry
    print the desktop entry and exit
  -h, --help
    Show this help message and exit
  -v, --version
    print the $CLI_NAME version and exit

arguments:
  completions
    generates shell completions for $CLI_NAME

Examples:
  $CLI_NAME --generate-desktop-entry
  $CLI_NAME completions --fish 
" "$CLI_NAME"
  exit "$1"
}
load_config
while [ $# -gt 0 ]; do
  case "$1" in
  -h | --help)
    usage 0
    ;;
  -v | --version)
    echo "$CLI_NAME $CLI_VERSION Copyright © 2024 $CLI_AUTHOR projects"
    exit 0
    ;;
  -e | --edit-config)
    $PREFERRED_EDITOR "$CLI_CONFIG_DIR/${CLI_NAME}.conf" || exit 1
    exit 0
    ;;
  -s | --search)
    [ -n "$2" ] || usage 1
    SEARCH="$2"
    shift
    ;;
  -p | --preferred-selector)
    [ -n "$2" ] || usage 1
    PREFERRED_SELECTOR="$2"
    shift
    ;;
  --private)
    UPDATE_RECENT="false"
    ;;
  --preview)
    ENABLE_PREVIEW="true"
    ;;
  --no-preview)
    ENABLE_PREVIEW="false"
    ;;
  -d | --disown-reading-process)
    DISOWN_STREAMING_PROCESS="true"
    ;;
  -D | --no-disown-reading-process)
    DISOWN_STREAMING_PROCESS="false"
    ;;
  --rofi-theme)
    [ -n "$2" ] || usage 1
    ROFI_THEME="$2"
    shift
    ;;
  -E | --generate-desktop-entry)
    echo "
[Desktop Entry]
Name=$CLI_NAME
Type=Application
version=$CLI_VERSION
Path=$HOME
Comment=Read and manage your calibre books from the terminal
Terminal=false
Icon=$CLI_DIR/assets/logo.png
Exec=$0 --preferred-selector rofi
Categories=Education
    "
    exit 0
    ;;
  completions)
    [ -n "$2" ] || usage 1
    case "$2" in
    -f | --fish)
      echo "\
# --- functions ---
function _lib_x_complete_search
  for comp_line in (calibredb list_categories --csv) 
    echo (echo \$comp_line|cut --delimiter , --fields 1):(echo \$comp_line|cut --delimiter , --fields 2|tr -d '\"')
  end
end

# --- completions ---
complete -c $CLI_NAME --no-files --arguments \"completions\" --condition 'not __fish_contains_opt search s sort-by S e edit-config p preferred-selector d disown-reading-process D no-disown-reading-process E generate-desktop-entry rofi-theme'

complete -c $CLI_NAME --no-files --short-option h --long-option help --description 'Print a short help text and exit'
complete -c $CLI_NAME --no-files --short-option v --long-option version --description 'Print a short version string and exit' --condition 'not __fish_seen_subcommand_from completions'

complete -c $CLI_NAME --no-files --short-option e --long-option edit-config --description 'Edit $CLI_NAME config file' --condition 'not __fish_seen_subcommand_from completions'
complete -c $CLI_NAME --no-files --short-option p --long-option preferred-selector --description 'your preferred selector' --condition 'not __fish_seen_subcommand_from completions' --exclusive --arguments 'fzf rofi'
complete -c $CLI_NAME --no-files --short-option d --long-option disown-reading-process --description 'disown the reading process' --condition 'not __fish_seen_subcommand_from completions'
complete -c $CLI_NAME --no-files --short-option D --long-option no-disown-reading-process --description 'dont disown the reading process' --condition 'not __fish_seen_subcommand_from completions'
complete -c $CLI_NAME --no-files --short-option E --long-option generate-desktop-entry --description 'generate desktop entry info' --condition 'not __fish_seen_subcommand_from completions' 
complete -c $CLI_NAME --no-files --short-option P --long-option private --description 'dont update recent' --condition 'not __fish_seen_subcommand_from completions'

complete -c $CLI_NAME --no-files --long-option preview --description 'enable preview window' --condition 'not __fish_seen_subcommand_from completions' 
complete -c $CLI_NAME --no-files --long-option no-preview --description 'disable preview window' --condition 'not __fish_seen_subcommand_from completions' 

complete -c $CLI_NAME --force-files --long-option rofi-theme --description 'the path to your rofi config file' --condition 'not __fish_seen_subcommand_from completions' 

complete -c $CLI_NAME --no-files --short-option s --long-option search --description 'search for a book' --condition 'not __fish_seen_subcommand_from completions' --exclusive --arguments \"(_lib_x_complete_search)\"

complete -c $CLI_NAME --no-files --short-option z --long-option zsh --description 'print zsh completions' --condition '__fish_seen_subcommand_from completions'
complete -c $CLI_NAME --no-files --short-option b --long-option bash --description 'print bash completions' --condition '__fish_seen_subcommand_from completions'
complete -c $CLI_NAME --no-files --short-option f --long-option fish --description 'print fish completions' --condition '__fish_seen_subcommand_from completions'
    "
      ;;
    -b | --bash)
      # TODO: write bash completions
      command ...
      ;;
    -z | --zsh)
      # TODO: write zsh completions
      command ...
      ;;
    -h | --help)
      echo "\
Generate shell completions for $CLI_NAME

Options:
  --fish
    print fish completions and exit
  --bash
    print bash completions and exit
  --zsh
    print zsh completions and exit

Example:
  $CLI_NAME completions --fish
  $CLI_NAME completions --bash
  $CLI_NAME completions --zsh
    "
      ;;
    *)
      echo "\
Generate shell completions for $CLI_NAME

Options:
  --fish
    print fish completions and exit
  --bash
    print bash completions and exit
  --zsh
    print zsh completions and exit

Example:
  $CLI_NAME completions --fish
  $CLI_NAME completions --bash
  $CLI_NAME completions --zsh
    "
      exit 1
      ;;

    esac
    exit 0
    ;;
  *)
    usage 1
    ;;
  esac
  shift
done
main
